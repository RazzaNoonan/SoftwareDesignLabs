import org.apache.zookeeper.*;
import org.apache.zookeeper.data.Stat;
import java.util.List;
import java.io.File;
import java.io.IOException;

public class ClusterHealer implements Watcher {

    private ZooKeeper zookeeper;
    private String pathToProgram;
    private int numberOfWorkers;
    private String zookeeperAddress;

    public ClusterHealer(int numberOfWorkers, String pathToProgram, String zookeeperAddress) {
        this.pathToProgram = pathToProgram;
        this.numberOfWorkers = numberOfWorkers;
        this.zookeeperAddress = zookeeperAddress;
    }

    public void start() throws IOException, InterruptedException, KeeperException {
        this.zookeeper = new ZooKeeper(zookeeperAddress, 3000, this);
        Stat stat = zookeeper.exists("/workers", this);

        if (stat == null) {
            zookeeper.create("/workers", new byte[]{}, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        }

        maintainWorkers();
    }

    private void maintainWorkers() throws KeeperException, InterruptedException {
        List<String> currentWorkers = zookeeper.getChildren("/workers", this);
        int currentWorkerCount = currentWorkers.size();
        System.out.println("Currently there are " + currentWorkerCount + " workers");

        if (currentWorkerCount < numberOfWorkers) {
            int toStart = numberOfWorkers - currentWorkerCount;
            for (int i = 0; i < toStart; i++) {
                try {
                    startWorker();
                } catch (IOException e) {
                    System.err.println("Failed to start worker: " + e.getMessage());
                    // You could optionally reduce the target number of workers here if you can't start them
                }
            }
            // This is assuming startWorker() successfully started a worker.
            System.out.println("Currently there are " + numberOfWorkers + " workers after adding " + toStart + " more.");
        }
    }

    public void run() {
        synchronized (zookeeper) {
            while (true) {
                try {
                    zookeeper.wait();
                } catch (InterruptedException e) {
                    System.out.println("ClusterHealer interrupted. Shutting down...");
                    break;
                }
            }
        }
    }

    public void close() throws InterruptedException {
        zookeeper.close();
    }

    public void process(WatchedEvent event) {
        if (event.getType() == Event.EventType.None) {
            switch (event.getState()) {
                case SyncConnected:
                    System.out.println("Successfully connected to Zookeeper");
                    break;
                case Disconnected:
                    System.out.println("Disconnected from Zookeeper");
                    break;
                case Expired:
                    System.out.println("Session expired");
                    break;
                default:
                    break;
            }
        } else if (event.getType() == Event.EventType.NodeChildrenChanged) {
            try {
                maintainWorkers();
            } catch (KeeperException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void startWorker() throws IOException {
        File file = new File(pathToProgram);
        String command = "java -jar " + file.getName();
        Process workerProcess = Runtime.getRuntime().exec(command, null, file.getParentFile());
        System.out.println("Started worker process with command: " + command);
    }
}
